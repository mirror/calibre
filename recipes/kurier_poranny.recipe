import re
from calibre.web.feeds.news import BasicNewsRecipe
from calibre.ebooks.BeautifulSoup import Comment

class KurierPoranny(BasicNewsRecipe):
    title          = u'Kurier Poranny'
    __author__        = 'fenuks'
    description   = u'Kurier Poranny | poranny.pl - portal miejski Białegostoku,informacje,wydarzenia'
    category       = 'newspaper'
    language       = 'pl'
    encoding = 'iso-8859-2'
    extra_css = 'ul {list-style: none; padding:0; margin:0;}'
    INDEX = 'http://www.poranny.pl'
    masthead_url = INDEX + '/images/top_logo.png'
    oldest_article = 7
    max_articles_per_feed = 100
    remove_empty_feeds = True
    no_stylesheets = True
    ignore_duplicate_articles = {'title', 'url'}

    preprocess_regexps = [(re.compile(ur'Czytaj:.*?</a>', re.DOTALL), lambda match: ''), (re.compile(ur'Przeczytaj także:.*?</a>', re.DOTALL|re.IGNORECASE), lambda match: ''), 
                          (re.compile(ur'Przeczytaj również:.*?</a>', re.DOTALL|re.IGNORECASE), lambda match: ''), (re.compile(ur'Zobacz też:.*?</a>', re.DOTALL|re.IGNORECASE), lambda match: '')]
    
    keep_only_tags = [dict(id=['article', 'cover', 'photostory'])]
    remove_tags = [dict(id=['articleTags', 'articleMeta', 'boxReadIt', 'articleGalleries', 'articleConnections',
                  'ForumArticleComments', 'articleRecommend', 'jedynkiLinks', 'articleGalleryConnections', 
                  'photostoryConnections', 'articleEpaper', 'articlePoll', 'articleAlarm', 'articleByline']), 
                  dict(attrs={'class':'articleFunctions'})]


    feeds          = [(u'Wszystkie', u'http://www.poranny.pl/rss.xml'), 
                      (u'Białystok', u'http://www.poranny.pl/bialystok.xml'), 
                      (u'Bielsk Podlaski', u'http://www.poranny.pl/bielskpodlaski.xml'), 
                      (u'Czarna Białostocka', u'http://www.poranny.pl/czarnabialostocka.xml'), 
                      (u'Hajnówka', u'http://www.poranny.pl/hajnowka.xml'), 
                      (u'Łapy', u'http://www.poranny.pl/lapy.xml'), 
                      (u'Sokółka', u'http://www.poranny.pl/sokolka.xml'), 
                      (u'Supraśl', u'http://www.poranny.pl/suprasl.xml'), 
                      (u'Wasilków', u'http://www.poranny.pl/wasilkow.xml'), 
                      (u'Sport', u'http://www.poranny.pl/sport.xml'), 
                      (u'Praca', u'http://www.poranny.pl/praca.xml'), 
                      (u'Kultura', u'http://www.poranny.pl/kultura.xml'), 
                      (u'Dom', u'http://www.poranny.pl/dom.xml'), 
                      (u'Auto', u'http://www.poranny.pl/auto.xml'), 
                      (u'Polityka', u'http://www.poranny.pl/polityka.xml')]

    def get_cover_url(self):
        soup = self.index_to_soup(self.INDEX + '/apps/pbcs.dll/section?Category=JEDYNKI')
        nexturl = self.INDEX + soup.find(id='covers').find('a')['href']
        soup = self.index_to_soup(nexturl)
        self.cover_url = self.INDEX + soup.find(id='cover').find(name='img')['src']
        return getattr(self, 'cover_url', self.cover_url)

    def append_page(self, soup, appendtag):
        tag = soup.find('span', attrs={'class':'photoNavigationPages'})
        if tag:
            number = int(tag.string.rpartition('/')[-1].replace('&nbsp;', ''))
            baseurl = self.INDEX + soup.find(attrs={'class':'photoNavigationNext'})['href'][:-1]

            for r in appendtag.findAll(attrs={'class':'photoNavigation'}):
                r.extract()
            for nr in range(2, number+1):
                soup2 = self.index_to_soup(baseurl + str(nr))
                pagetext = soup2.find(id='photoContainer')
                if pagetext:
                    pos = len(appendtag.contents)
                    appendtag.insert(pos, pagetext)
                pagetext = soup2.find(attrs={'class':'photoMeta'})
                if pagetext:
                    pos = len(appendtag.contents)
                    appendtag.insert(pos, pagetext)
                pagetext = soup2.find(attrs={'class':'photoStoryText'})
                if pagetext:
                    pos = len(appendtag.contents)
                    appendtag.insert(pos, pagetext)
            
            comments = appendtag.findAll(text=lambda text:isinstance(text, Comment))
            for comment in comments:
                comment.extract()


    def preprocess_html(self, soup):
        self.append_page(soup, soup.body)
        return soup
